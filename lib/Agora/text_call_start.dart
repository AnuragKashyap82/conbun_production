// import 'dart:async';// import 'dart:typed_data';// import 'package:agora_rtc_engine/agora_rtc_engine.dart';// import 'package:cloud_firestore/cloud_firestore.dart';// import 'package:conbun_production/Agora/agora_code/videocall_pojo.dart';// import 'package:conbun_production/utils/colors.dart';// import 'package:firebase_auth/firebase_auth.dart';// import 'package:permission_handler/permission_handler.dart';// import 'package:flutter/material.dart';// import 'package:get/get.dart';// import '../../Views/bottomNavScreens/bottomNavScreen.dart';// import '../../utils/constant.dart';// import 'controllers/individual_chat_controller.dart';// import 'controllers/messageController.dart';//// class TextCallScreen extends StatefulWidget {//   final String fname;//   final String imageUrl;//   final String userId;//   final bool receivecall;//   final String channelId;//   final String agoratoken;//   final String lname;//   final String appointmentDuration;//   final String appointmentId;////   TextCallScreen(//       {required this.fname,//       required this.imageUrl,//       required this.userId,//       required this.receivecall,//       required this.channelId,//       required this.agoratoken,//       required this.lname, required this.appointmentDuration, required this.appointmentId});////   @override//   _TextCallScreenState createState() => _TextCallScreenState();// }//// class _TextCallScreenState extends State<TextCallScreen> {//   MessageController messageController = Get.put(MessageController());////   ///call duration//   late Timer _callDurationTimer;//   int _callDurationInSeconds = 0;//   late int _streamId;//   FirebaseAuth _auth = FirebaseAuth.instance;////   String get formattedCallDuration {//     // Convert seconds to HH:mm:ss format//     int hours = _callDurationInSeconds ~/ 3600;//     int minutes = (_callDurationInSeconds % 3600) ~/ 60;//     int seconds = _callDurationInSeconds % 60;//     String formattedTime = '';////     if (hours > 0) {//       formattedTime += '$hours:';//     }////     formattedTime +=//         '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';////     return formattedTime;//   }////   ///Chat services//   final TextEditingController _messageController = TextEditingController();////   void _sendMessage() async {//     if (_messageController.text.isNotEmpty) {//       await sendMessage(_messageController.text.trim());//       setState(() {//         messageController.addMessage("Me: ${_messageController.text}");//         _messageController.clear();//       });//     }//   }////   late StreamSubscription<QuerySnapshot> callStreamSubscription;//   bool isccallstart = false;//   bool _isScreenShared = false;//   bool _isCalldisconnet = false;////   ///jb meeting se sare user left ho jayenge means ab only local user hai////   int uid = 0; // uid of the local user////   int? _remoteUid; // uid of the remote user//   List<int> _remoteUids = [];//   bool _isJoined = false; // Indicates if the local user has joined the channel//   late RtcEngine agoraEngine; // Agora engine instance//   final GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey =//       GlobalKey<ScaffoldMessengerState>(); // Global key to access the scaffold////   bool isFullScreen = false;//   bool myfullscreen = false;//   bool remotefullscreen = true;////   showMessage(String message) {//     scaffoldMessengerKey.currentState?.showSnackBar(SnackBar(//       content: Text(message),//     ));//   }////   bool isContainerAInFullPage = true;//   var callactiveornotstatus;//   var callringingornotstatus = '';////   ///this is for draggable view//   bool isMyFullScreen = true;////   Future<void> ringDuration() async {//     Future.delayed(Duration(seconds: 30), () async {//       if (_remoteUid == null) {//         leave();//         Get.off(() => BottomNavScreen(currentTab: 0));//       } else {}//     });//   }////   @override//   void initState() {//     super.initState();//     // Set up an instance of Agora engine//     setupVideoSDKEngine();//     getCallDetails(widget.userId);//     ringDuration();//   }//// // Build UI//   @override//   Widget build(BuildContext context) {//     getCallDetails(widget.userId);//     return MaterialApp(//       debugShowCheckedModeBanner: false,//       scaffoldMessengerKey: scaffoldMessengerKey,//       home: Scaffold(//         resizeToAvoidBottomInset: true,//         backgroundColor: colorBackground,//         appBar: AppBar(//             backgroundColor: colorWhite,//             elevation: 7,//             shadowColor: Colors.black.withOpacity(0.1),//             automaticallyImplyLeading: false,//             title: Text(//               "Text Messaging",//               style: TextStyle(//                   fontSize: 16,//                   fontWeight: FontWeight.w600,//                   color: colorViolet,//                   fontFamily: "SemiBold"),//             ),//             actions: [//               if (_callDurationInSeconds > 0)//                 Padding(//                   padding: const EdgeInsets.all(8.0),//                   child: Text(//                     formattedCallDuration,//                     style: const TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600,color: colorViolet,//                         fontFamily: "SemiBold"),//                   ),//                 ),//             ]),//         body: Container(//             height: MediaQuery.of(context).size.height,//             child: Stack(//               children: <Widget>[//                 Obx(() {//                   return ListView.builder(//                     itemCount: messageController.messages.length,//                     shrinkWrap: true,//                     itemBuilder: (context, index) {//                       return ListTile(//                         leading: Container(//                           height: 42,//                           width: 42,//                           decoration: BoxDecoration(//                             shape: BoxShape.circle,//                             color: Colors.grey.shade200//                           ),//                           child: Icon(Icons.person, color: colorViolet,),//                         ),//                         title: Text(messageController.messages[index]),//                       );//                     },//                   );//                 }),//                 Positioned(//                     bottom: 16,//                     left: 0,//                     right: 0,//                     child: Padding(//                       padding: const EdgeInsets.symmetric(horizontal: 8.0),//                       child: Row(//                         children: [//                           Expanded(//                             child: Container(//                               height: 52,//                               decoration: BoxDecoration(//                                   color: Colors.grey.shade200,//                                   borderRadius: BorderRadius.circular(26)),//                               child: Padding(//                                 padding: const EdgeInsets.symmetric(//                                     horizontal: 16.0),//                                 child: TextFormField(//                                   controller: _messageController,//                                   decoration: InputDecoration(//                                       enabledBorder: InputBorder.none,//                                       focusedBorder: InputBorder.none,//                                       hintText: "Enter your messsage"),//                                 ),//                               ),//                             ),//                           ),//                           SizedBox(//                             width: 8,//                           ),//                           Container(//                             height: 52,//                               width: 52,//                               decoration: BoxDecoration(//                                 shape: BoxShape.circle,//                                 color: Colors.grey.shade200//                               ),//                               child: IconButton(//                               onPressed: () {//                                 _sendMessage();//                               },//                               icon: Icon(//                                 Icons.send,//                                 color: colorViolet,//                               )))//                         ],//                       ),//                     )),//               ],//             )),//       ),//     );//   }////   // Send a chat message//   Future<void> sendMessage(String message) async {//     Uint8List messageBytes = Uint8List.fromList(message.codeUnits);//     int length = messageBytes.length;//     await agoraEngine.sendStreamMessage(//         streamId: _streamId, data: messageBytes, length: length);//   }////   Future<void> setupVideoSDKEngine() async {//     try {//       // Request necessary permissions (only microphone if needed for voice messages)//       final permissions = await [Permission.microphone].request();////       if (permissions[Permission.microphone] != PermissionStatus.granted) {//         Future.delayed(Duration(seconds: 2), () {//           Get.off(BottomNavScreen(currentTab: 0));//         });//       }////       // Create an instance of the Agora engine//       agoraEngine = createAgoraRtcEngine();////       // Initialize the Agora engine with your app ID and channel profile//       await agoraEngine.initialize(const RtcEngineContext(//         appId: Constant.agoraAppId,//         channelProfile: ChannelProfileType//             .channelProfileCommunication, // Keep the profile for communication//       ));////       // Set the channel profile to live broadcasting and the client role to broadcaster//       await agoraEngine//           .setChannelProfile(ChannelProfileType.channelProfileCommunication);//       await agoraEngine.setClientRole(//           role: ClientRoleType.clientRoleBroadcaster);////       // Register the event handler//       agoraEngine.registerEventHandler(//         RtcEngineEventHandler(//           onJoinChannelSuccess: (RtcConnection connection, int elapsed) {//             showMessage(//                 "Local user uid:${connection.localUid} joined the channel");//             setState(() {//               _isJoined = true;//             });//           },//           onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {//             showMessage("Remote user uid:$remoteUid joined the channel");//             setState(() {//               isccallstart = true;//               _remoteUid = remoteUid;//               _remoteUids.add(remoteUid);//               _callDurationTimer =//                   Timer.periodic(const Duration(seconds: 1), (timer) {//                 setState(() {//                   _callDurationInSeconds++;//                 });//               });//             });//           },//           onUserOffline: (RtcConnection connection, int remoteUid,//               UserOfflineReasonType reason) {//             showMessage("Remote user uid:$remoteUid left the channel");//             setState(() {//               _remoteUid = null;//               _remoteUids.remove(remoteUid);//               if (_remoteUids.isEmpty) {//                 _callDurationTimer.cancel();//                 _isCalldisconnet = false;//                 _callDurationTimer.cancel();//                 leave();//                 Get.off(() => BottomNavScreen(currentTab: 0));//               }//             });//           },//           onStreamMessage: (RtcConnection connection, int remoteUid,//               int streamId, Uint8List data, int length, int sentTs) {//             String message = String.fromCharCodes(data);//             showMessage("Received message: $message from user: $remoteUid");//             setState(() {//               messageController.messages.add("User $remoteUid: $message");//             });//           },//         ),//       );////       // Join the channel//       join();////       // Create a data stream for sending messages//       final streamId = await agoraEngine.createDataStream(//           DataStreamConfig(ordered: true, syncWithAudio: true));////       // Update the state with the result//       setState(() {//         _streamId = streamId;//       });////       // Show the stream ID in a message//       showMessage(_streamId.toString());//     } catch (e) {//       debugPrint("Error in setupVideoSDKEngine: $e");//     }//   }////   void join() async {//     print("AGORA TOKEN  ${widget.channelId}");//     print(widget.agoratoken);//     // await agoraEngine.startPreview();////     // Set channel options including the client role and channel profile//     ChannelMediaOptions options = const ChannelMediaOptions(//       clientRoleType: ClientRoleType.clientRoleBroadcaster,//       channelProfile: ChannelProfileType.channelProfileCommunication,//     );////     await agoraEngine.joinChannel(//       token: widget.agoratoken,//       channelId: widget.channelId,//       options: options,//       uid: uid,//     );//   }////   void leave() async {//     setState(() {//       _isJoined = false;//       _remoteUid = null;//       _remoteUids.clear();//     });//     agoraEngine.leaveChannel();//     var userlist = [_auth.currentUser!.uid, widget.userId]..sort();//     var userJoin = userlist.join('-');//     Map<String, dynamic> userData = {//       'activecall': false,//       'calldisconnectby': _auth.currentUser!.uid//     };////     // await FBCollections.videocall.doc(userJoin).update(userData);//     // var controller = Get.isRegistered<RecentChatController>()//     //     ? Get.find<RecentChatController>()//     //     : Get.put(RecentChatController());//     // controller.getData();////     Get.back();//   }////   // Release the resources when you leave//   @override//   void dispose() async {//     // Cancel the timer to avoid memory leaks//     _callDurationTimer.cancel();//     // Leave the Agora channel and release resources//     await agoraEngine.leaveChannel();//     agoraEngine.release();//     // Clean up any GetX controllers if applicable//     if (Get.isRegistered<IndividualChatController>()) {//       Get.delete<IndividualChatController>();//     }////     // Any other custom resource cleanup//     super.dispose();//   }////   Future<void> getCallDetails(String userId) async {//     var chatsCollection = FirebaseFirestore.instance//         .collection('Text')//         .where('commonusers', arrayContains: userId)//         .where('activecall', isEqualTo: true);//     Stream<QuerySnapshot> chatStream = chatsCollection.snapshots();//     chatStream.listen((QuerySnapshot chatQuerySnapshot) {//       if (chatQuerySnapshot.docs.isEmpty) {//         // No documents found//         print("No active calls found");//         setState(() {//           callactiveornotstatus = false;//           callringingornotstatus = "SDF SDF ";//           leave();//         });//       } else {//         for (QueryDocumentSnapshot document in chatQuerySnapshot.docs) {//           Map<String, dynamic> chatData =//               document.data() as Map<String, dynamic>;//           VideoCallData videoCallData = VideoCallData.fromMap(chatData);//           print("CALL STATUS RUNNING");//           print("======= ========" + videoCallData.channelId);//           print(videoCallData.receiverfname);//           print(videoCallData.senderName);//           print("======= ======== ${videoCallData.activeCall}");//           print("======= ======== ${videoCallData.callingstatus}");////           ////           setState(() {//             callactiveornotstatus = videoCallData.activeCall;//             callringingornotstatus = videoCallData.callingstatus + " check";//           });//         }//       }//     });//   }// }